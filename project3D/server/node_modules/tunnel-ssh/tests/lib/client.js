const net = require('net');

class Client {
    constructor(serverPort, serverHost) {
        this.listener = {
            reconnect: null
        };
        this.serverPort = serverPort;
        this.serverHost = serverHost;
        this.client = new net.Socket();
    }
    verbose() {
        this.client.eventNames().forEach((eventName) => {
            this.client.on(eventName, () => {
                console.log(`client (${this.serverPort}) event: ${eventName}`);
            });
        });
    }
    async connect() {
        return new Promise((resolve, reject) => {
            this.client.connect(this.serverPort, this.serverHost, () => {
                resolve(this);
            });
            this.client.once('error', (error) => {
                reject(error);
            });
        });
    }
    onEndReconnectHandler(){
        this.connect();
    }
    enableAutoReconnect() {
        this.client.on('end', this.onEndReconnectHandler.bind(this) );
    }
    disbaleAutoReconnect() {
        this.client.removeListener('end', this.onEndReconnectHandler.bind(this) );
    }
    async write(message) {
        this.client.write(message);
    }
    async writeAndRead(message) {
        return new Promise((resolve, reject) => {
            this.client.once('data', (data) => {
                resolve(data.toString().trim());
            });
            this.client.write(message);
        });
    }
    async close() {
        return new Promise((resolve, reject) => {
            this.client.once('close', () => {
                resolve();
            });
            this.client.end();
        });
    }
}


exports.Client = Client;