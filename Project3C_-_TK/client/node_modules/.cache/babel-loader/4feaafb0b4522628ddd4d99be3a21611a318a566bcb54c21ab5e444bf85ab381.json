{"ast":null,"code":"import React from 'react';\nconst ValidateCardNumber = () => {\n  /*\r\n  * Referencing\r\n  * https://learnersbucket.com/examples/javascript/credit-card-validation-in-javascript/\r\n  */\n\n  const validateCardNumber = number => {\n    //Check if the number contains only numeric value  \n    //and is of between 13 to 19 digits\n    const regex = new RegExp(\"^[0-9]{13,19}$\");\n    if (!regex.test(number) || number == '0000000000000000') {\n      return false;\n    }\n    return luhnCheck(number);\n  };\n  const luhnCheck = val => {\n    let checksum = 0; // running checksum total\n    let j = 1; // takes value of 1 or 2\n\n    // Process each digit one by one starting from the last\n    for (let i = val.length - 1; i >= 0; i--) {\n      let calc = 0;\n      // Extract the next digit and multiply by 1 or 2 on alternative digits.\n      calc = Number(val.charAt(i)) * j;\n\n      // If the result is in two digits add 1 to the checksum total\n      if (calc > 9) {\n        checksum = checksum + 1;\n        calc = calc - 10;\n      }\n\n      // Add the units element to the checksum total\n      checksum = checksum + calc;\n\n      // Switch the value of j\n      if (j == 1) {\n        j = 2;\n      } else {\n        j = 1;\n      }\n    }\n\n    //Check if it is divisible by 10 or not.\n    return checksum % 10 == 0;\n  };\n};\n_c = ValidateCardNumber;\nexport default ValidateCardNumber;\nvar _c;\n$RefreshReg$(_c, \"ValidateCardNumber\");","map":{"version":3,"names":["React","ValidateCardNumber","validateCardNumber","number","regex","RegExp","test","luhnCheck","val","checksum","j","i","length","calc","Number","charAt","_c","$RefreshReg$"],"sources":["C:/Users/rdjon/Code/tk-main/Project3C_-_TK/client/src/Functions/validateCardNumber.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst ValidateCardNumber = () => {\r\n    /*\r\n    * Referencing\r\n    * https://learnersbucket.com/examples/javascript/credit-card-validation-in-javascript/\r\n    */\r\n\r\n    const validateCardNumber = number => {\r\n        //Check if the number contains only numeric value  \r\n        //and is of between 13 to 19 digits\r\n        const regex = new RegExp(\"^[0-9]{13,19}$\");\r\n        if (!regex.test(number) || number == '0000000000000000'){\r\n            return false;\r\n        }\r\n    \r\n        return luhnCheck(number);\r\n    }\r\n\r\n    const luhnCheck = val => {\r\n        let checksum = 0; // running checksum total\r\n        let j = 1; // takes value of 1 or 2\r\n\r\n        // Process each digit one by one starting from the last\r\n        for (let i = val.length - 1; i >= 0; i--) {\r\n        let calc = 0;\r\n        // Extract the next digit and multiply by 1 or 2 on alternative digits.\r\n        calc = Number(val.charAt(i)) * j;\r\n\r\n        // If the result is in two digits add 1 to the checksum total\r\n        if (calc > 9) {\r\n            checksum = checksum + 1;\r\n            calc = calc - 10;\r\n        }\r\n\r\n        // Add the units element to the checksum total\r\n        checksum = checksum + calc;\r\n\r\n        // Switch the value of j\r\n        if (j == 1) {\r\n            j = 2;\r\n        } else {\r\n            j = 1;\r\n        }\r\n        }\r\n    \r\n        //Check if it is divisible by 10 or not.\r\n        return (checksum % 10) == 0;\r\n    }\r\n}\r\n\r\nexport default ValidateCardNumber;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAC7B;AACJ;AACA;AACA;;EAEI,MAAMC,kBAAkB,GAAGC,MAAM,IAAI;IACjC;IACA;IACA,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,gBAAgB,CAAC;IAC1C,IAAI,CAACD,KAAK,CAACE,IAAI,CAACH,MAAM,CAAC,IAAIA,MAAM,IAAI,kBAAkB,EAAC;MACpD,OAAO,KAAK;IAChB;IAEA,OAAOI,SAAS,CAACJ,MAAM,CAAC;EAC5B,CAAC;EAED,MAAMI,SAAS,GAAGC,GAAG,IAAI;IACrB,IAAIC,QAAQ,GAAG,CAAC,CAAC,CAAC;IAClB,IAAIC,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEX;IACA,KAAK,IAAIC,CAAC,GAAGH,GAAG,CAACI,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAIE,IAAI,GAAG,CAAC;MACZ;MACAA,IAAI,GAAGC,MAAM,CAACN,GAAG,CAACO,MAAM,CAACJ,CAAC,CAAC,CAAC,GAAGD,CAAC;;MAEhC;MACA,IAAIG,IAAI,GAAG,CAAC,EAAE;QACVJ,QAAQ,GAAGA,QAAQ,GAAG,CAAC;QACvBI,IAAI,GAAGA,IAAI,GAAG,EAAE;MACpB;;MAEA;MACAJ,QAAQ,GAAGA,QAAQ,GAAGI,IAAI;;MAE1B;MACA,IAAIH,CAAC,IAAI,CAAC,EAAE;QACRA,CAAC,GAAG,CAAC;MACT,CAAC,MAAM;QACHA,CAAC,GAAG,CAAC;MACT;IACA;;IAEA;IACA,OAAQD,QAAQ,GAAG,EAAE,IAAK,CAAC;EAC/B,CAAC;AACL,CAAC;AAAAO,EAAA,GA/CKf,kBAAkB;AAiDxB,eAAeA,kBAAkB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}